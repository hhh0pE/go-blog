CREATE TABLE "pages" (
  id serial,
  parent_id int4,
  template_id int4,
  url varchar,
  title varchar,
  description varchar,
  keywords varchar,
  content text,
  created_at timestamp,
  updated_at timestamp,
  viewed_count int4,
  image varchar
);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (14, 4, 2, 'настройка-nginx-для-golang-сайта', 'Nginx и Go - друзья!', 'В этой статье мы подружим Nginx и Go-сайт.
Нужно это для того, что бы на одном сервере иметь воможность размещать множество сайтов.
И, конечно, никто не отменяет все остальные плюшки Nginx. ', 'go, golang, nginx, настройка nginx, nginx и go', '<p>На самом деле, если на вашем сервере хоститься только один сайт и вы хотите написать его на Go - Nginx не нужен. </p>

<p>Написать простой hello-сервер на GoLang можно в ~20 строчек. </p>
<pre class="prettyprint"><code class="language-go">
package main

import (
	"net/http"
	"strings"
)

func sayHello(w http.ResponseWriter, r *http.Request) {
	name := "World"
	url := strings.Trim(r.RequestURI, "/")
	if len(url) > 0 {
		name = strings.Split(url, "/")[0]
		name = strings.ToUpper(name[0:1]) + name[1:] // change first symbol to Uppercase
	}
	w.Write([]byte("Hello, " + name + "!"))
}

func main() {
	http.HandleFunc("/", sayHello)
	err := http.ListenAndServe(":80", nil)
	if err != nil {
		panic(err.Error())
	}
}
</code></pre>
<p>24 строчка кода, полноценный сервер, который висит на 80 порту и выводит в браузер hello-фразу. Какую именно? Я думаю, по коду это должно быть понятно. Если нет, советую самостоятельно запустить этот код у себя на машине и поиграться с ним до полного его понимания.</p>

<p>Пока что все хорошо и очень просто. Но что, если мы хотим запустить ещё один сайт на Go? Или у нас уже есть сервер с запущенными сайтами на PHP, допустим? </p>

<p>Установку и базовую настройку Nginx я описывать не буду - в сети множество информации.</p>
<p>Далее создаем новую запись под свой домен</p>
<pre>
server {
  listen 80;
  
  server_name lesnoy.name;

  // ... some settings here ...
  
  location / {
      root 		/app/;
      include 		fastcgi_params;
      proxy_pass	http://localhost:9001;
  }
  
}
</pre>

<p>Смысл очень простой. Мы говорим Nginx, на какой порт переадресовывать запрос для конкретного домена. Т.е. при запросе lesnoy.name Nginx переадресует запрос на localhost:9001. И, если у нас запущенный процесс, слушающий и отвечающий на этот порт, все будет отлично работать.</p>

<p>Из примера выше поменяется лишь одна строчка.</p>
<pre>
	http.ListenAndServe(":9001", nil)
</pre>

<p>Если процесс не запущен, то вывалится ошибка 502 Bad Gateway.</p>

<p>Вот и все. Это базовая настройка Nginx для использования вашего Go-сайта на сервере. Кроме возможности размещать на одном сайте множество Go-сайтов в Nginx множество других возможностей, как gzip, настройки кеширования, отдача статических файлов (картинки, css, etc), балансировщик нагрузки и так далее.</p>

<p>В общем, Go и Nginx вполне себе друзья.</p>', '2015-05-11 23:03:40.121493', '2015-07-04 15:24:18.899634', 124, 'go-hello-server_white3.png');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (22, 0, 3, 'javascript', 'JavaScript', 'Программирование на JavaScript в браузере. Зачастую с использованием jQuery - куда без него сейчас? :) ', null, null, '2015-05-21 19:20:04.221459', '2015-06-04 18:16:47.340000', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (23, 22, 2, 'автоматическое-подсвечивание-текущего-пункта-меню', 'Выделение текущего пункта меню', 'Распространенная задача для сайта - подсветка активного пункта меню.
Это значительно улучшает юзабилити сайта.

О том, как просто это сделать на клиенте посредством JavaScript - в этой статье.
', 'javascript, jquery, автоматическое меню, построение меню на клиенте, подсветка текущего пункта меню с помощью JavaScript', '<p>
Часто для сайта требуется сделать активным элемент меню, соответствующий странице сайта, на которой посетитель находиться в данный момент. Это значительно улучшает навигацию по сайту и юзабилити сайта в целом.
</p>

<p>Довольно тривиальная задача, но каждый решает её по-разному.</p>
<p>Можно вычислить нужную страницу и "пометить" её ещё на стороне сервера (на php, python, Go, .Net, etc). Вторым возможным решением является перенос этой задачи на сторону клиента (браузера). </p>

<p>У браузерной реализации есть свои преимущества, главное из них - разгрузка сервера от выполнения не обязательных задач. Пускай сервер выятгивает данные из базы данных, производит сложные расчеты, реализует вытесняющий кэш и многое другое, но зачем серверу знать о элементе графического интерфейса сайта? Тем более, что JS дял этого подходит даже лучше.</p>

<h2>Выделяем активный пункт меню с помощью jQuery</h2>
<p>Конечно, это лишь пример того, как это можно сделать. Каждый сайт имеет свою структуру URL и может потребоваться другая логика. Проект, для которого я писал этот код, является CRM-системой с URL вида <i>/lead/view?id=[id]</i>, <i>/product/create/</i> и т.д. Меню же было одноуровневое, для каждой сущности (Products, Leads, Companies, etc). </p>

<pre class="prettyprint">
function highlightActiveMenuItem(menu_selector) {
    $(menu_selector+'' a'').removeClass("active");
    var page_url = ''/''+location.pathname.split(''/'')[1];
    $(menu_selector+''a[href="''+page_url+''"]'').addClass(''active'');
}
</pre>

<p>Для каждой задачи, зачастую, нужен свой код. Я не стремился охватить все возможные варианты меню и структуры URL, скорее даже наоборот - я сделал это для своей задачи и опубликовал в блоге как памятка. Возможно, в будущем пригодиться, я возьму эту идею за основу и доработаю согласно актуальной задачи.</p>
<p>Возможно, кто-то сделает так же.</p>', '2015-05-21 19:36:26.347513', '2015-07-04 23:55:27.160946', 138, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (5, 0, 3, 'notes', 'Заметки на вольные темы', null, null, null, '2015-05-09 02:29:49.040496', '2015-05-13 02:29:12.902000', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (12, 13, 5, 'date-and-time-formatting', 'Redirect', null, null, null, '2015-05-10 04:15:41.420170', '2015-05-10 04:15:41.420170', 0, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (4, 0, 3, 'golang', 'Язык программирования Go', 'Записи на тему языка программирования Go (GoLang).', 'go, golang, golang blog, golang notes, golang examples', null, '2015-05-09 02:29:12.902070', '2015-06-02 14:24:16.929000', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (3, 0, 1, '/', 'Блог Лесного Владислава', '', null, null, '2015-05-09 02:27:24.378395', '2015-06-04 18:16:47.340000', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (24, 0, 3, 'linux', 'ОС Linux', 'Пользуясь операционной системой семейства Linux тебе всегда есть, чем поделиться с другими :)
 ', null, null, '2015-05-23 00:43:08.314234', '2015-05-23 00:43:08.314234', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (31, 22, 2, 'syntaxError-unterminated-string-litaral', 'Ошибка "SyntaxError: unterminated string literal"', 'Вставляя script в script не стоит удивлятся появлению недокументированных ошибок :)
Я вот сделал так и столкнулся с подобной ошибкой. О её решении и решил написать заметку - вдруг кому поможет?', '', '<p>Во время такого специфического занятия, как вставка script-тега с помощью javascript у меня возникла такая ошибка:</p>
<strong>SyntaxError: unterminated string literal</strong>
<p>Вот пример кода</p>
<pre>$("body").append(''&lt;script id="autoSize"&gt;&lt;/script&gt;'');
</pre>
<p>Из-за чего происходит ошибка? Парсер JavaScript находит <i>&lt;/script&gt;</i> и думает, что это закрытие всего нашего js-тега. </p>

<h2>Решение проблемы</h2>
<p>Можно ли обмануть парсер? Конечно ;)</p>

<pre>$("body").append(''&lt;script id="autoSize"&gt;&lt;/''+''script&gt;'');
$("body").append(''&lt;script id="autoSize"&gt;'');</pre>

<p>Проблема решена - парсер не найдет теперь <i>&lt;/script&gt;</i></p>', '2015-06-10 17:34:08.545175', '2015-07-02 22:14:44.342810', 33, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (32, 22, 2, 'jquery-events-и-динамический-DOM', 'Работа с jQuery events при динамическом изменении DOM-структуры', 'Как правильно работать с jQuery events, когда структура html-документа постоянно меняется?

Например, при работе с ajax-приложением (подгрузка только части страницы).

Достаточно обрабатывать события функцией $(selector).on(params..).', '', '<p>Простой хак при работе с jquery events при динамически изменяющемся DOM:</p>
<p>Вместо прямых event-функций по типу <strong>$(selector).event_name(handler_func);</strong></p>
<pre>$(selector).click(function(e){
	// code her
});
$("a.ajax").click(function(e){
	console.log(e);
});
$("tr i.star").click(function(){
	$(this).removeClass("star").addClass("star-o");
});
</pre>

<p>лучше использовать конструкцию <strong>$(selector_parent).on(event_name, selector, handler_func)</strong></p>
<p>Примеры:</p>
<pre>$(selector_parent).on(event_name, selector, function(e){
	// code her;
});
$("body").on("click", "a.ajax", function(e){
	console.log(e);
});
$("tr").on("click", "i.star", function(){
	$(this).removeClass("star").addClass("star-o");
});
</pre>

<p>При работе с ajax-запросами, например, это жизненно-необходимая конструкция, призванная сэкономить нервные клетки frontend-программиста.</p>', '2015-06-23 16:54:25.268780', '2015-07-05 20:26:49.269975', 26, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (10, 4, 2, 'обновление-до-версии-1.4', 'Обновление Go до версии 1.4.1', 'Как правильно и быстро обновить версию Go в ОС Ubuntu?
Используем ppa и версию Go 1.4.1 после.', '', '<p>У меня была установлена версия Go 1.2.1.</p> 
<p>Однажды я решил, что пора бы обновиться до 1.4.1, которая уже вышла.</p>
<p>Итак, как это сделать наиболее просто и правильно?</p> 
<p>Для начала нужно вспомнить, как вы устанавливали Go изначально. Есть 2 варианта:</p> 
<ul>
<li> вручную качали архив с официального сайта и перемещали в нужную директорию (обычно /usr/local/go).
</li><li> Нашли ppa, добавили в систему и установили Go стандартным способом для любых linux-пакетов: sudo apt-get install golang
</li></ul>

<p>Мой случай - второй, потому моя задача - найти ppa с более свежей версией golang.</p> 
<p>Вот он на данный момент: ppa:evarlast/golang1.4</p>

<p>Итак, все мои действия свелись к следующим командам:</p>
<pre>sudo apt-add-repository ppa:evarlast/golang1.4
sudo apt-get update
sudo apt-get install golang
</pre>
 
<p>После последней команды система скажет, что пакет уже установлен, но что есть более свежий и спросит, устанавливать ли его. Отвечаем Да и через некоторое время у нас есть новая версия GoLang в системе.</p>
<p>Проверить версию очень просто, набираем в консоли</p> 
<pre>go version</pre>

<p>Мой вывод:</p>
<pre>go version go1.4.1 linux/amd64</pre>

<p>Успехов!</p>

', '2015-04-14 00:37:24.181000', '2015-07-05 21:16:45.823390', 92, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (26, 22, 2, 'асинхронная-и-отложенная-загрузка', 'Асинхронная и отложенная загрузка', 'Атрибуты async и defer для тега script позволяют намного лучше управлять порядком загрузки внешних javascript файлов.
Это способствует увеличению скорости загрузки сайта - актуальной проблемы для многих сайтов.', 'js, javascript, асинхронность, асинхронная загрузка, асинхронная загрузка js, асинхронная загрузка javascript, отложенная загрузка js, отложенная загрузка javascript, async, defer, script async, script defer', '<h2>Порядок загрузки страницы браузером</h2>
<p>Браузер загружает страницу последовательно. Особенно это актуально для внешних ссылках на файлы - css и javascript. Возьмем для примера блок  для сайта lesnoy.name.</p>

<pre>&lt;head&gt;
    &lt;title&gt; Блог Лесного Владислава &lt;/title&gt;

    &lt;link href="/assets/css/main.css?ver=1.0" type="text/css" rel="stylesheet" /&gt;
    &lt;link href="/assets/css/prettify.css" type="text/css" rel="stylesheet" /&gt;
    &lt;script src="/assets/js/prettify.js"&gt;&lt;/script&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no" /&gt;
&lt;/head&gt;
</pre>

<p>На данном сайте подгружается всего три внешних файла. 2 из них - css стили, и один - js-файл. Но это пример простого сайта, зачастую подгружаются десятки внешних файлов и это существенно влияет на скорость загрузки страницы.</p>

<h2>Ускорение отображения страницы в браузере</h2>
<p>Все бы ничего, но главная проблема в том, что браузер работает следующим образом: при встрече ссылки на внешний файл он загружает и обрабатывает его, приостанавливая отрисовку (рендер) всей остальной страницы. </p>
<p>Т.е., из примера выше видно, что браузер загрузит заголовок сайта (title), затем встретит ссылку на внешний css файл main.css и пойдет загружать его. После загрузки он его обрабатывает и идет дальше - встречает второй css-файл, опять откладывает обработку страницы на потом и работает с prettify.css. Так же и с prettify.js. И лишь потом он принимается за отображения остальной страницы, уже применяя все обработанные ранее css-правила из css файлов и js-кол из javascript файлов.</p>
<p>При медленном интернете либо большом количестве внешних файлов время между переходом на страницу и её отрисовкой может достигать десятков секунд, а то и более минуты. Но ведь разве нельзя, пока грузятся внешние файлы, отображать текст со страницы, за которым, собственно, и пришел посетитель?</p>
<p>Можно, конечно. Самый банальный, но от этого не менее действенный метод - перенос всех не приоритетных внешних файлов с хедера сайта в футер. Т.е. с head-блока как можно ближе к  тегу.</p>
<p>Под не приоритетными файлами я подразумеваю те, которые не критичны для функциональности или внешнего вида сайта. Хороший способ разделить большой css или js файл на два - первый маленький хранит в себе то, что должно загрузиться как можно быстрее и размещается в head-секции, а второй и объемный содержит все остальное и располагается как можно ниже в html-коде страницы, не влияя на скорость отображения контента страницы.</p>

<p>Но с приходом html5 можно сделать это проще и красивее. У тега script добавлен параметр <strong>async</strong> и <strong>defer</strong>.</p>

<h2>Атрибут async</h2>
<pre>	&lt;script async src="/assets/js/prettify.js"&gt;&lt;/script&gt;
</pre>

<p>Атрибут тега script async делает загрузку js-файлов асинхронным. Те, кто умеют программировать на JS точно знают, как это - асинхронно. Тем же, кто не умеет - расскажу: браузер встречает ссылку на внешний javascript файл (тег script с параметром src), начинает выполнять его загрузку и обработку, но не останавливает при этом загрузку и обработку основной страницы. Т.е. делает это параллельно. Как раз то, что нам и нужно! И при этом не требуется переносить этот тег в футер (тем более не во всех CMS-системах это просто сделать).</p>

<h3>Недостаток атрибута async</h3>
<p>У асинхронной загрузки js-файла асинхронность является как плюсом так и минусом. Ведь размеры файлов скорее всего разные, скорость загрузки и обработки файлов так же не является детерминированной. А значит при асинхронной загрузки нескольких файлов нет никакой гарантии, что файл, который стал загружаться позже не загрузиться в итоге раньше (из-за размера в основном).</p>

<pre>&lt;head&gt;
    ...

    &lt;script async src="script1.js"&gt;&lt;/script&gt;
    &lt;script async src="script2.js"&gt;&lt;/script&gt;
    &lt;script src="script3.js"&gt;&lt;/script&gt;
    &lt;script src="script4.js"&gt;&lt;/script&gt;
    &lt;script async src="script5.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</pre>

<p>В данном примере я не могу точно сказать, какая последовательность выполнения этих js-файлов будет. Я могу точно сказать лишь то, что script4 загрузиться после script3 из-за отсутствия у них атрибута async. Но какой файл из script1.js, script2.js и script5.js загрузиться раньше я не знаю, т.к. они загружаются асинхронно. </p>
<p>"Да и какая нам разница?" - спросите вы. Но она появляется в том случае, если выполнения одного js-скрипта зависит от другого. Такое сейчас сплошь и рядом и самый простой пример такой зависимости - jQuery.</p>

<pre>&lt;head&gt;
    ...

    &lt;script async src="jquery.min.js"&gt;&lt;/script&gt;
    &lt;script async src="plugin1.jquery.js"&gt;&lt;/script&gt;
    &lt;script async src="plugin2.jquery.js"&gt;&lt;/script&gt;
    &lt;script async src="plugin3.jquery.js"&gt;&lt;/script&gt;
    &lt;script async src="other_script.js"&gt;&lt;/script&gt;
&lt;/head&gt;
</pre>

<p>В данном случае очень велика вероятность получения ошибки JavaScript из-за того, что какой-либо из jQuery плагинов начнет выполнятся раньше, чем загрузиться сам jQuery.</p>
<p>Что же делать?</p>

<h2>Атрибут defer</h2>
<p>Тут нас и выручает другой атрибут script-тега - defer.</p>
<pre>&lt;head&gt;
    ...

    &lt;script defer src="jquery.min.js"&gt;&lt;/script&gt;
    &lt;script defer src="plugin1.jquery.js"&gt;&lt;/script&gt;
    &lt;script defer src="plugin2.jquery.js"&gt;&lt;/script&gt;
    &lt;script defer src="plugin3.jquery.js"&gt;&lt;/script&gt;
    &lt;script async src="other_script.js"&gt;&lt;/script&gt;
&lt;/head&gt;	
</pre>

<p><strong>Deferred</strong> переводиться с английского языка как "отложенный". Соответственно <i>deferred javascript load</i> - отложенная загрузка javascript. Если у ссылки на внешний js-файл браузер встречает атрибут defer, то он откладывает загрузку и выполнения этих файлов до тех пор, когда вся страница не будет загружена и отображена. При этом он гарантирует такой же порядок выполнения скриптов, который изначально и был установлен в html-коде.</p>

<p>Соответственно, в нашем примере с jQuery и его плагинами defer нас выручает, выполняя две задачи: время отображения страницы существенно уменьшается (браузер не блокирует отрисовку страницы для загрузки js-файлов, он откладывает загрузку на потом) и при этом мы избавляется от возможных ошибках, связанных с асинхронной загрузкой зависимых друг от друга js файлов.</p>

<p>В примере выше скрипт other_script.js загрузиться асинхронно, т.к. он не зависит от какого-либо другого файла, а jQuery и его плагины загрузятся сразу после отображения страницы в следующем порядке: сначала jquery.min.js, затем по порядку plugin1.jquery.js, plugin2.jquery.js, plugin3.jquery.js.</p>

<p>В итоге с приходом html5 и атрибутов defer и async мы можем намного гибче управлять порядком загрузки внешних js-файлов, тем самым повышая <strong>скорость отрисовки веб-страницы</strong>. А, главное, для пользователя будет создаваться впечатления значительного <strong>повышения скорости загрузки всего веб-сайта в целом</strong>, ведь уже через несколько секунд он увидит то, зачем пришел на сайт - информацию.</p>', '2015-05-26 13:44:21.149781', '2015-07-05 21:11:31.357756', 80, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (27, 16, 2, 'async-или-defer-для-всех-js-файлов', 'Автоматическое добавление атрибута async или defer для всех script-тегов', 'Хотите увеличить скорость загрузки сайта? Уменьшить % пользователей, которые ушли, не дождавшись загрузки нужной им информации? Повысить оценки Google PageSpeed Insights ?

Script defer или script async вам в этом помогут! 

Полезные скрипты для владельцев сайтов на CMS Wordpress.', 'async, defer, wordpress async, wordpress defer, google pagespeed insight, увеличение скорости загрузки', '<p>Если вы хотите увеличить скорость загрузки веб-сайта, который работает на CMS Wordpress, то у меня есть один js-код, который поможет это сделать.</p>

<h2>Google PageSpeed Insights</h2>
<p>Последнее время вопрос увеличения загрузки сайта стал очень актуальным. Google выпустила свой инструмент для проверки скорости загрузки сайтов под названием Google PageSpeed Insight. Вы просто указываете URL для проверки и после его анализа получаете оценки по различным параметрам и рекомендации по улучшению. </p>

<p>Последнее время я часто занимаюсь этим по работе и уже есть несколько заготовленных скриптов на этот счет, которые существенно облегчают задачу.</p>

<p>P.S. Есть идея написать статью про общие правила при оптимизации сайтов на WordPress - можно составить примерный алгоритм. Возможно, позже и напишу.</p>

<h2>Скрипт для автоматического добавления атрибута defer к каждому js-файлу</h2>

<p>Просто добавьте этот код в файл functions.php и все теги script с параметром src (т.е. которые загружат файлы js) автоматически будут с параметром defer.</p>

<pre class="prettyprint">
function add_defer_to_js( $url ) 
{
    if ( strpos( $url, ''.js'' ) === FALSE )
    { // если файл не заканчивается на .js - он нам не нужен
        return $url;
    }
    // иначе добаляем ему атрибут defer
    return "$url'' defer=''defer";
}

add_filter( ''clean_url'', ''add_defer_to_js'', 11, 1 );
</pre>

<h2>Автоматическое добавление атрибута async для script-тегов</h2>

<pre class="prettyprint">
function add_defer_to_js( $url ) 
{
    if ( strpos( $url, ''.js'' ) === FALSE )
    { // если файл не заканчивается на .js - он нам не нужен
        return $url;
    }
    // иначе добаляем ему атрибут defer
    return "$url'' sync=''sync";
}

add_filter( ''clean_url'', ''add_defer_to_js'', 11, 1 );
</pre>

<p>Будьте аккуратны с атрибутом async - он может вызвать ошибки на сайте! </p>

<p>Подробнее о синхронности, асинхронности и отложенной загрузки скриптов читайте в отдельной статье в разделе <a href="/javascript/">JavaScript</a> - <a href="/javascript/асинхронная-и-отложенная-загрузка/">Асинхронная и отложенная загрузка - async и defer параметры тега script</a>.</p>', '2015-05-26 14:08:03.588730', '2015-07-02 12:12:17.387592', 43, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (28, 4, 2, 'кросскомпиляция', 'Кросс-компиляция: Linux, Windows, MacOS, Android', 'Компилируем под Windows из-под Linux.
Компилируем под Linux из-под Windows.
Компилируем под Android.
И под MacOS.

Свобода компилирования с GoLang, именуемая кросс-компиляцией!', 'golang, golang crosscompiling, кроскомпиляция, golang кросскомпиляция, golang windows, golang linux, golang arm, golang compile for windows, golang compile for linux, golang compile for arm ', '<h2>Go и кросс-компиляция</h2>
<p>У Go кроссплатформенная философия. Один раз написал код и компилируй под любую платформу и операционную систему. </p>
<p>При выполнении команды </p>
<pre>
go build
</pre>
<p>Go компилирует программу под текущую ОС и архитектуру.</p>
<p>Если нужно скомпилировать GoLang-программу под другую ОС или архитектуру, следует указать два параметра <strong>GOOS</strong> и <strong>GOARCH</strong></p>
<pre>
GOOS=windows GOARCH=386 go build
GOOS=linux GOARCH=amd64 go build
GOOS=windows GOARCH=amd64 go build
</pre>

<h2>Возможные значения GOOS</h2>
<ul>
<li>linux</li>
<li>windows</li>
<li>freebsd</li>
<li>darwin</li>
</ul>
<p>С linux, windows и freebsd все понятно. Darwin - это MacOS. А если хочеться скомпилировать под Android (да, так тоже можно :), то нужно выбрать GOOS=Linux и GOARCH=arm.</p>

<h2>Возможные значения GOARCH</h2>
<ul>
<li>386</li>
<li>amd64</li>
<li>arm</li>
</ul>
<p>386 - это 32-битная архитектура компьютера (почему 386? Исторически так сложилось). Amd64 - 64-битная архитектура компьютера. Arm - arm-архитектура, в основном для смартфонов.</p>

<h2>Ошибки и их устранение</h2>
<p>Я работаю на ОС Linux и обычно компилировал свои Go-приложения только под Linux. Но вот одним поздним вечером ночью понадобилось скомпилировать мой код под windows. Но что-то пошло не так..</p>
<pre>
hhh0p3@hhh0p3-Aspire-E1-572:~/Code/Go/src/github.com/hhh0pE/test > GOOS=linux GOARCH=386 go build
# runtime
/usr/lib/go/src/runtime/atomic_386.c:7 8c: No such file or directory: textflag.h
</pre>
<p>На мою вежливую просьбу скомпилировать мое приложение под windows go-компилятор ответил не менее вежливым "нет". Послал аж на <i>/usr/lib/go/src/runtime/atomic_386.c</i>, прямо на 7 строчку, представляете?</p>
<p>Ну что ж, куда нас послали, туда и пойдем - что нам остается? </p>
<pre>
hhh0p3@hhh0p3-Aspire-E1-572:~/Code/Go/src/github.com/hhh0pE/test > dpkg -S textflag.h
golang-src: /usr/share/go/src/cmd/ld/textflag.h
golang-go-linux-amd64: /usr/lib/go/pkg/linux_amd64/textflag.h
</pre>
<p>С помощью команды <i>dpkg -S textflag.h</i> найдены все пакеты, которые используют этот файл. И тут был замечен пакет <strong>golang-go-linux-amd64</strong>. Этот пакет уже установлен в системе по-умолчанию.</p>
<p>Посмотрим, какие пакеты можно установить ещё.</p>
<pre>
hhh0p3@hhh0p3-Aspire-E1-572:~/Code/Go/src/github.com/hhh0pE/test > apt-cache search golang-go-
golang-go-linux-amd64 - Go standard library compiled for linux_amd64
golang-go-linux-arm - Go standard library compiled for linux_arm
golang-go-linux-386 - Go standard library compiled for linux_386
golang-go-freebsd-amd64 - Go standard library compiled for freebsd_amd64
golang-go-freebsd-arm - Go standard library compiled for freebsd_arm
golang-go-freebsd-386 - Go standard library compiled for freebsd_386
golang-go-windows-amd64 - Go standard library compiled for windows_amd64
golang-go-windows-386 - Go standard library compiled for windows_386
golang-go-darwin-amd64 - Go standard library compiled for darwin_amd64
golang-go-darwin-386 - Go standard library compiled for darwin_386
golang-go-netbsd-amd64 - Go standard library compiled for netbsd_amd64
golang-go-netbsd-386 - Go standard library compiled for netbsd_386
</pre>
<p>Получили список всех доступных компиляторов под различные комбинации ОС и архитектуры. Соответственно, необходимо установить пакет для выбранных ОС и архитектуры и все будет компилироваться без ошибок.</p>
<p>Мне нужно было скомпилировать программу под 64-битную Windows, потому я установил соответствующий пакет:</p>
<pre>
sudo apt-get install golang-go-windows-amd64
</pre>
<p>Попытка компиляции под Windows из-под Linux #2:</p>
<pre>
hhh0p3@hhh0p3-Aspire-E1-572:~/Code/Go/src/github.com/hhh0pE/test > GOOS=windows go build
hhh0p3@hhh0p3-Aspire-E1-572:~/Code/Go/src/github.com/hhh0pE/test > ls
main.go  test  test.exe
</pre>
<p>Создался exe. Что мне и требовалось.</p>', '2015-05-31 02:00:16.929445', '2015-07-05 07:00:57.200621', 114, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (13, 4, 2, 'форматирование-даты-и-времени', 'Форматирование даты и времени в Go', 'В Go нас ждет много неожиданных, но правильно реализованных вещей. Go-way.
Первая из них - это форматирования даты и времени. С ней мы и разберемся в этой заметке.', '', '<p>Итак, формат даты в моем блоге я привел в порядок. Как оказалось, форматирование даты в языке Go - довольно нетривиально реализованная задача, после привычных dd/mm/YYYY в php date(). Итак, что мы имеем в Go?</p>
<p>По-сути все то же самое, но есть кардинальное отличие. Вместе символов-констант, которые обозначают определенную часть даты, у нас есть дата-шаблон. В GoLang взяли дату 02 января 2006 года, 3 часа 4 минуты 5 секунда (01/02 03:04:05PM ''06 -0700).</p>
<p>Т.е. вместо dd в PHP у нас есть 01, вместо mm - 02, вместо H:i:s - 03:04:05.</p>
<p>По-сути ничего сложного и сейчас, через 10 минут после понимания, нафига нам вообще 2006 при форматировании дат, я начинаю понимать что, возможно, это весьма неплохое решение я запомнить это будет, возможно, проще, чем mm/dd/YYYY. Но я не уверен :D</p>

<p>А теперь главное - примеры. Сделаю табличку для наглядности.</p>
<p>Дату для примера возьмем сегодняшнюю: 10 апреля 2015 02:09 ночи.</p>

<pre><table>
    <tbody><tr><td>PHP format</td><td>Go format</td><td>Result</td></tr>
    <tr><td>dd.mm.YYYY</td><td>02.01.2006</td><td>10.04.2006</td></tr>
    <tr><td>H:i:s</td><td>03:04:05</td><td>02:09:45</td></tr>
</tbody></table>
</pre>
				', '2015-04-10 02:10:23.276000', '2015-07-05 18:05:53.375571', 62, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (6, 5, 2, 'first_post', 'Первая запись!', 'О чем будет этот блог? Какова его практическая ценность и чем он отличается от других?
Первая запись в блог должна давать ответы на эти вопросы, и я пытаюсь соответствовать предписанию :)', '', '<p>Итак, о чем будет этот блог? Я планирую создать его с нуля на языке программирования GoLang. И писать об этом, каждый значительный шаг описывать а так же вести репозиторий на github, что бы были видны все изменения. 
Сама суть блога проста - вывод записей из базы да и все. Но начать можно с простого, а закончить мегокрутым блогом с разделением по тематикам, мультиязычностью, комментариями, удобной авторизацией через различные соц.сети и так далее. К этому и будем идти. И все это на прекрасном GoLang! Я думаю, будет интересно, однозначно.</p>

<p>Итак, что уже есть? 
</p><ul>
<li> Настроен сервер, nginx
</li><li> Заведен репозиторий и создано простейшее приложения по типу Hello World, только со счетчиком посещений (простейший пример, но после php и от него дух захватывает :).
</li><li> Настроен postgres и создана БД для сайта, а так же первая таблица posts и простейшей структурой.
</li></ul>
<p></p>

<p>Репозиторий находиться по адресу: <a href="https://github.com/hhh0pE/go-blog">github.com/hhh0pE/go-blog</a></p>

<p>Пока что все. Дальше будет много всего интересного. Будьте на связи.</p>', '2015-04-07 20:30:47.956000', '2015-07-04 11:36:40.927908', 66, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (25, 24, 2, 'просмотр-только-заголовоков-для-curl', 'Просмотр только заголовков для curl', 'С помощью консоли бывает удобно посмотреть, что ответил сервер на тот или иной запрос.
Иногда выжны только http-заголовки. Незачем передавать всю остальную информацию с сервера.

Какие параметры нужно передать в таком случае для curl? 


', '', '<p>К консоли быстро привыкаешь. С неё так же удобно проверять корректность заголовком сайта. Но по-умолчанию crul возвращает весь ответ севрера. Как сделать, что бы возвращались только заголовки?</p>
<pre>
curl -v -s http://lesnoy.name 1> /dev/null
</pre>

<p>Ответом будет:</p>
<pre class="prettyprint">
* Rebuilt URL to: http://lesnoy.name/
* Hostname was NOT found in DNS cache
*   Trying 54.93.171.33...
* Connected to lesnoy.name (54.93.171.33) port 80 (#0)
> GET / HTTP/1.1
> User-Agent: curl/7.35.0
> Host: lesnoy.name
> Accept: */*
> 
< HTTP/1.1 200 OK
* Server nginx/1.6.2 is not blacklisted
< Server: nginx/1.6.2
< Date: Fri, 22 May 2015 21:42:17 GMT
< Content-Type: text/html; charset=utf-8
< Transfer-Encoding: chunked
< Connection: keep-alive
< Set-Cookie: last-viewed=2015-05-22T21:42:17Z; Expires=Sun, 22 May 2016 21:42:17 UTC
< 
{ [data not shown]
* Connection #0 to host lesnoy.name left intact
</pre>', '2015-05-23 00:44:36.862123', '2015-07-02 10:40:22.105344', 35, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (15, 4, 2, 'кириллические-адреса', 'Работа с кириллическими адресами', 'Кириллические домены и URL. Punnycode и URL-кодирование.
Как технические кодируются кириллические адреса страниц? И причем здесь IDN? 

А так же как это все реализовать на Go. ', '', '<p>Стандартная библиотека у Go великолепна. Серьезно, она может почти все. Но главное в этом - она соответствует стандартам, имеет хорошую документацию (которая ссылается на RFC, например) и создает отличную базу для других библиотек. </p>
<p>До сих пор я не столкнулся с отсутствием хоть одной нужной мне библиотеки. Sitemap? Есть. RSS? Есть. Работа с кириллическими адресами? Тоже есть! И, конечно же, в полном соответствии со стандартами, о которых, зачастую, узнаешь благодаря документации к библиотеке.</p>

<p>В моем проекте, который я пишу на Go и который ориентирован исключительно на Украину, я использую киррилический домен и кириллические URL. Т.е. адрес польностью кириллический, вида </p>
	<pre class="prettyprint">поддомен.домен.укр/раздел/страница</pre>

<p>Причем адрес делиться на 2 части: кириллический домен и кириллический URL.</p>

<p>Кириллический адрес кодируется с помощью Punnycode. URL - с помощью URL-coding. </p>

<p>Как вообще технически возможны кириллические адреса, если по всем стандартам http-заголовки должны содержать только латиницу? Стало такое возможно благодаря IDN. Идея его проста: кириллические слово кодируется с помощью латинских символов, а для того, что бы не спутать с другим адресом на латинице, впереди добавляется "xn--".</p>

<p>Примеры:</p>
<pre>
пример.домен = xn--e1afmkfd.xn--d1acufc
купить.сайт = xn--h1adpnc1d.xn--80aswg
днепропетровск.укр = xn--b1adda0aoibgbjdpk.xn--j1amh
власть.рф = xn--80ad1azaf4d.xn--p1ai
</pre>

<p>А теперь вместе с URL:</p>
<pre>http://домен.укр/статья/о-всем-всем-всем/ = http://xn--d1acufc.xn--j1amh/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D1%8F/%D0%BE-%D0%B2%D1%81%D0%B5%D0%BC-%D0%B2%D1%81%D0%B5%D0%BC-%D0%B2%D1%81%D0%B5%D0%BC/
http://ц.укр/имя.фамилия/ = https://xn--v1a.xn--j1amh/%D0%B8%D0%BC%D1%8F.%D1%84%D0%B0%D0%BC%D0%B8%D0%BB%D0%B8%D1%8F/
</pre>

<p>Каждый символ в UTF-8 кодировке представляется двумя байтами. Http работает в ANSI, для которой выделяется 1 байт на каждый символ. Как быть? Все просто, каждый байт из UTF-8 строки переводиться в шестнадцатиричное представление, добавляя перед каждым знак "%". Т.е. буква "с" после преобразования из 1 UTF-8 символа в 2 обычный байта равна D1 81. Добавляем знак "%", получаем "%D1%81". Можете свериться с примерами выше.</p>

<p>Благодаря развитию браузеров такие преобразование не нужно делать в коде html страницы (если она передана в кодировке UTF-8). Браузеры это делают сами. Например, при наведении мыши на кириллическую ссылку, в каком бы формате она не была записана (кодирована или нет), браузер отобразит в удобочитаемом виде (кириллическом представлении). В адресной строке браузера так же будет преобразованный, красивый адрес. 
Но у двух самых популярных браузеров есть существенное отличие: Firefox при копировании адреса из адресной строки оставляет весь адрес в кириллическом виде, а Chrome отдает адрес кодированном, некрасивом виде. На данный момент это единственный существенный недостаток при использовании кириллических адресов. Если вы скопируете ссылку с кириллического сайта в Chrome и отправите её другу, то он может испугаться и решить пойти наконец погулять, а то и так много в интернете сидит. Хороший метод, конечно, но не для владельца сайта, адрес которого вы прислали другу. </p>

<p>Но, стоит сказать, это уже не так страшно, как несколько лет назад. И большое спасибо за это Wikipedia - она использует кириллические URL для всего русскоязычного сегмента своего сайта. </p>

<p>А вот кирилличекие домены ещё достаточно молоды и мало используются. В основном их используют в рекламных целях, красиво печатая на визитку или рекламу, а сам сайт технически просто переадресовыает пользователя на обычный адрес, состоящий из латинских символов. </p>

<p>Ещё забавнее встречать кириллический адрес с английскими URL. Например, http://сеошник.укр/category/пояснения/. При наборе такого адреса придеться два раза переключать раскладку, что не очень удобно. К тому же, чисто логически, очень глупо получается. Но чаще всего это недостаток программ для управления сайтами. Мало кто из них полноценно поддерживает кириллические адреса. Ведь спрос очень мал ещё.</p>

<p>В GoLang для работы с кириллическими URL достаточно стандартной библиотеки net/url.</p>
<p>Для работы с кириллическими доменами так же есть библиотека, написанная по стандарту IDN: golang.org/x/net/idna.</p>

<p>Пример кода для преобразования кириллический адресов представлен ниже.</p>

<pre class="prettyprint">
package main

import (
    "net/url"
    "golang.org/x/net/idna"
    "fmt"
)

func main() {

    domains := []string{"сайт.укр", "домен.укр", "власть.рф", "город-в.укр", "купить-мебель.укр", "президент.укр"}
    urls := []string{"/статьи/об-авторе/", "/новости/днепропетровск/", "/народу/", "/новости/", "/только у нас!", "/самый лучший/"}

    for i:=0; i&lt;len(domains); i++ {
        encoded_url, err := url.Parse(urls[i])
        encoded_domain, err := idna.ToASCII(domains[i])
        if err != nil {
            panic(err.Error())
        }

        fmt.Println(domains[i]+urls[i]+" => "+encoded_domain+encoded_url.String())
    }
}
</pre>

<p>Вывод программы будет следующий:</p>
<pre>
сайт.укр/статьи/об-авторе/ => xn--80aswg.xn--j1amh/%D1%81%D1%82%D0%B0%D1%82%D1%8C%D0%B8/%D0%BE%D0%B1-%D0%B0%D0%B2%D1%82%D0%BE%D1%80%D0%B5/
домен.укр/новости/днепропетровск/ => xn--d1acufc.xn--j1amh/%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8/%D0%B4%D0%BD%D0%B5%D0%BF%D1%80%D0%BE%D0%BF%D0%B5%D1%82%D1%80%D0%BE%D0%B2%D1%81%D0%BA/
власть.рф/народу/ => xn--80ad1azaf4d.xn--p1ai/%D0%BD%D0%B0%D1%80%D0%BE%D0%B4%D1%83/
город-в.укр/новости/ => xn----dtbbe3can.xn--j1amh/%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8/
купить-мебель.укр/только у нас! => xn----btblbllmey5ai5ig.xn--j1amh/%D1%82%D0%BE%D0%BB%D1%8C%D0%BA%D0%BE%20%D1%83%20%D0%BD%D0%B0%D1%81%21
президент.укр/самый лучший/ => xn--d1abbgf6aiiy.xn--j1amh/%D1%81%D0%B0%D0%BC%D1%8B%D0%B9%20%D0%BB%D1%83%D1%87%D1%88%D0%B8%D0%B9/
</pre>

<p>Т.е. если вы используете кириллические URL на обычном домене, вам будет достаточно стандартной библиотекой net/url. Если у вас кириллический домен - нужно использовать дополнительную библиотеку net/idna.</p>

<p>Где необходимо использовать эти библиотеки? При работе с http-заголовками (301 редирект, например), при построении sitemap и robots.txt. В основном же, благодаря поддержки браузерами UTF-8, дополнительной работы по преобразованию ссылок в html-коде не будет.</p>', '2015-05-17 04:21:27.467298', '2015-07-04 15:24:13.246221', 51, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (30, 22, 2, 'ajax-загрузка-файлов', 'Загрузка файлов на сервер с помощью Ajax', 'С реализацией браузерами спецификации HTML5 многие вещи в веб стало делать намного проще и приятнее.
Одна из таких вещей - ajax-запросы в общем и загрузка файлов на сервер с помощью ajax в частности.

Итак, загружаем файл на сервер без перезагрузки страницы - версия с минимальным количеством кода.
Используем jQuery и рассматриваем только клиентскую часть (без серверной пока).
', 'jquery ajax file upload, javascript file upload, загрузка файла на сервер, загрузка файла на сервер без перезагрузки страницы, загрузка файла без перезагрузки страницы, jquery загрузка файла, ajax загрузка файла, js загрузка файла, javascript загрузка файла', '<p>На работе мы сейчас разрабатываем свою CRM-систему. Backend пишем на Yii. Особенностью работы сайта является то, что при переходе на другую страницу перехватывается событие клика по ссылке, отправляется запрос на сервер и, получив в ответ только нужный блок html-кода, перерисовывает DOM-структуру. В итоге все довольны: клиенты - быстрой работой сайта, админы - уменьшенной нагрузкой на сервер, программисты же просто радуются красоте решения.</p>

<p>Решили мы сделать загрузку файлов на сервер - как же без этого? Аватарки пользователей, прикрепленные документы, вложения в почте и т.д. Но в связи с тем, что сайт у нас полностью на Ajax, пришлось провести небольшой research по запросу "ajax загрузка файлов". </p>

<p>Выяснилось, что с этим все хорошо, спасибо спецификации html5. Главный недостаток для production-проектов - поддержка IE10+. Но мы решили пока не обращать внимание на пользователей с IE8,9 - если по статистике после запуска проекта увидим, что таких пользователей не так уж и мало, тогда сделаем решение и под IE8,9.</p>

<p>Сначала наткнулся на плагин Jquery Ajax Upload. Вроде бы хороший, красивенький, но, как и все фреймворки, тянет с собой много js и css-файлов, а так же заставляет, вместо написания кода, писать правильные конфиги, что ничуть не приятнее.</p>

<p>Я же решил реализовать все на jQuery (в проекте он все равно используется).</p>

<p>Для начала будем делать все как можно проще. Html-разметка будет очень простая</p>

<pre class="prettyprint">&lt;input class="fileinput" data-url="''.$url_to_upload.''" name="''.$this-&gt;attribute.''" type="file" /&gt;
</pre>

<p>Это код с backend''а, формируем обычный input с type=file, в data-url указываем URL, по которому будем загружать картинку, ну и name содержит название input''a.</p>

<p>На клиенте у нас будет сформировано следующее</p>
<pre class="prettyprint">&lt;input class="fileinput" data-url="/lead/ajaxFileUpload?id=12345" name="userpic" type="file" /&gt;
</pre>

<p>Как видно, данные input используется для загрузки аватарки для lead''а в CRM. В URL, на который мы будем отсылать нашу картинку, присутствует id лида.</p>

<p>Поехали дальше - js.</p>

<pre class="prettyprint">$(''.fileinput'').change(function(){
    var send_url = $(this).attr(''data-url'');
    var fd = new FormData();

    console.log(this.files);

    fd.append("userpic", this.files[0]);

    $.ajax({
        url: send_url,
        type: "POST",
        data: fd,
        processData: false,
        contentType: false
    });
});
</pre>

<p>Тут все максимально просто:</p>
<ul>
<li>Ловим событие <i>onchange</i> для элементов с классом <i>fileinput</i> </li>
<li>Формируем данные для отсылки с помощью специального объекта JavaScript (введенного с появлением HTML5) <strong>FormData</strong></li>
<li>С помощью <i>jQuery.ajax</i> отправляем данные посредством ajax (xhr-запроса). </li>
</ul>

<p>Так же, для лучшего понимания работы скрипта, я специально оставил <i>console.log(this.files);</i> - можно посмотреть, какая структура данных по-умолчанию создается для html-элемента c type=file.</p>

<p>Но и тут я успел столкнуться с нюансом. Не зря я указал опцию <i>processData: false</i>. Без неё ничего не получилось, в консоли браузера выдавалась ошибка: <i>Uncaught TypeError: Illegal invocation</i> в Chrome и более осмысленная <i>TypeError: ''append'' called on an object that does not implement interface FormData.</i> в Firefox (последняя киллер-фича Firebug''а как раз и заключается в том, что ошибки он выводит намного более осмысленные. Зачастую спасает.).</p>

<p>А все потому, что при proccessData = true jquery пытается сконвертировать все ajax-данные в одну строку. Естественно, для файла это не нужно, по-этому установкой данной опции в false мы избавим jQuery от мучений.</p>

<p>Решением, как вы догадались, является установка параметра processData в false. Теперь все заработало - в chrome''s developer tools на вкладке Network можно увидеть, что запрос успешно отправился с данными файла. Отлично!</p>

<pre class="prettyprint">------WebKitFormBoundaryy90AgaMBI1x05pSx
Content-Disposition: form-data; name="userpic"; filename="test_image.jpg"
Content-Type: image/jpeg


------WebKitFormBoundaryy90AgaMBI1x05pSx--
</pre>

<p>Сервер пока возвращает 404 ошибку. Оно и понятно - я им вообще ещё не занимался, вот он и обиделся.</p>

<h2>Серверная часть</h2>
<p>На сервере, после настройки rout''ов и добавлении action''а в контроллер (это в каждом фреймворке делается по-разному), у нас появляется доступ к загруженному файлу через глобальный массив <strong>$_FILES</strong>. Мало того, php уже загрузил файл на сам сервере в папку tmp. Теперь можно делать с ним все, что душа пожелает. Но ограничиваются обычно лишь перемещением файла в более удобную директорию (tmp имеет свойство очищаться) и, возможно, добавлению записи в базу данных.</p>

<p>Собственно, по несложной команде <i>var_dump($_FILES)</i> у меня получился вот такой вывод:</p>

<pre class="prettyprint">array(1) {
  ["userpic"]=&gt;
  array(5) {
    ["name"]=&gt;
    string(37) "test_image.jpg"
    ["type"]=&gt;
    string(10) "image/jpeg"
    ["tmp_name"]=&gt;
    string(14) "/tmp/phpLsTgFK"
    ["error"]=&gt;
    int(0)
    ["size"]=&gt;
    int(44482)
  }
}
</pre>

<p>Бинго! Файл успешно загружен на сервер с помощью Ajax. </p>', '2015-06-02 19:06:47.340400', '2015-07-05 21:09:39.958508', 64, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (17, 16, 2, 'загрузка-стилей-в-футере', 'Загружаем все стили в футере сайта', 'Переносим все css сайта с head''ера в подвал сайта несколькими строчками кода в functions.php.
Очень помогает при оптимизации скорости загрузки сайта. Например, для Google Speed Insights.', '', '<p>В WordPress довольно просто и элегантно можно заставить все стили грузиться не в head''ере сайта, а в подвале. Для этого в functions.php добавляем следующий код.</p>

<pre class="prettyprint">
function footer_enqueue_scripts()
{
    remove_action( ''wp_head'', ''wp_print_styles'', 8 );
    
    add_action( ''wp_footer'', ''wp_print_styles'', 5 );
}
add_action( ''after_setup_theme'', ''footer_enqueue_scripts'' );
</pre>

<p>Конечно, это будет работать, если стили у вас грузяться правильно, через wp_register_style/wp_enqueue_style. </p>
<p>Очень помогает при оптимизации сайта под требования <strong>Google Speed Insights</strong></p>', '2015-05-18 21:15:28.106475', '2015-07-04 07:45:38.778424', 45, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (16, 0, 3, 'wordpress', 'Wordpress', '', null, null, '2015-05-18 21:03:35.796309', '2015-05-26 14:08:03.698000', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (18, 10, 5, 'updating-to-1.4', 'Redirect', null, null, null, '2015-05-19 18:36:49.315105', '2015-05-19 18:36:49.315105', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (19, 0, 3, 'htaccess', '.htaccess', null, null, null, '2015-05-19 18:40:06.312160', '2015-05-19 18:40:06.312160', 0, null);
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (20, 19, 2, 'авторедирект-на-https', 'Автоматический редирект на https', 'При переходе на http://[ваш_сайт] необходимо делать редирект на https://[ваш_сайт]?
Делаем это с помощью файла .htaccess.
Используем возможности mod_rewrite для универсальности правила.', '', '<p>В интернете довольно много примеров редиректа на https с помощью htaccess файла. Но везде есть нюансы, а некоторые примеры чересчур усложнены.</p>

<p>Приведенный ниже пример делает редирект всякий раз, когда пользователь зашел на http версию сайта. Какой бы не был домен, есть ли вначале www или нет, независимо от URL. </p>

<pre>RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
</pre>

<p>Используются возможности mod_rewrite: проверка, что в текущем запросе нет https, переменные <strong>%{HTTP_HOST}</strong> и <strong>%{REQUEST_URI}</strong> для универсальности правила (можно кидать один и тот же htaccess в корневые директории различных сайтов).</p>
<p>С помощью псевдокода можно записать так:</p>

<pre><span style="line-height: 1.5;">if (strpos(URL, "https") === FALSE) {</span><br>    doRedirect(
        str_replace("http", "https", URL)
    );
}
</pre>

<p>Размещать этот код лучше всего как можно ближе к <i>началу файла .htaccess</i> - правило должно сработать раньше всех остальных, ведь если будет осуществлен редирект, зачем тратить ресурсы на другие правила?</p>', '2015-05-19 19:43:51.656420', '2015-07-05 21:24:02.245070', 268, '');
INSERT INTO "pages"(id, parent_id, template_id, url, title, description, keywords, content, created_at, updated_at, viewed_count, image) VALUES (21, 16, 2, 'относительные-и-абсолютные-ссылки', 'Относительные и абсолютные ссылки', 'В чем отличие? Примеры относительных и абсолютных ссылок.
А так же пример кода для автоматического преобразования всех ссылок в Wordpress в абсолютные без учета домена и протокола.', 'абсолютные ссылки, относительные ссылки, абсолютные ссылки в Wordpress, Wordpress ссылки', '<h2>Что такое относительная ссылка?</h2>
<p>Есть два вида людей: те, кто используют относительные ссылки и остальные.</p>
<pre>
http://lesnoy.name/wordpress/относительные-ссылки/
/wordpress/относительные-ссылки/
относительные-ссылки/
</pre>

<p>Допустим, вы находитесь на странице <i>http://lesnoy.name/wordpress/</i>. Какую бы из трех вышеуказанных ссылок вы не нажали, вы попадете на эту страницу (на которой вы сейчас находитесь).</p>
<p>А вот если вы будете находиться на любой другой странице, допустим, на <i>http://lesnoy.name/golang/</i>, то одна из ссылок будет вести на страницу с неправильным URL. Какая, как думаете?</p>

<p>На самом деле все очень просто. Браузер знает адрес страницы, на которой вы сейчас находитесь. Если вы переходите с текущей страницы по относительной ссылке (ссылка в примере №3), то браузер возьмет текущий адрес и добавит к нему адрес относительной ссылки. </p>

<p>Если ссылка абсолютная, браузер возьмет ссылку и вставит её в адресную строку полностью(перейдет по ней), без каких либо дополнительных операций с адресом ссылки.</p>
<p>Абсолютными считаются ссылки, которые начинаются с протокола (http,https,ftp) либо со слэша. Относительными - все остальные. Смотрим примеры.</p>

<pre>
http://lesnoy.name/golang/ + "форматирование-даты-и-времени/" => http://lesnoy.name/golang/форматирование-даты-и-времени/
http://lesnoy.name/golang/ + "/форматирование-даты-и-времени/" => http://lesnoy.name/форматирование-даты-и-времени/
http://lesnoy.name/ + "форматирование-даты-и-времени/" => http://lesnoy.name/форматирование-даты-и-времени/
http://lesnoy.name + "/wordpress/" => http://lesnoy.name/wordpress/
http://lesnoy.name/golang/форматирование-даты-и-времени/ + "//:lesnoy.name/wordpress/загрузка-стилей-в-футере/" => http://lesnoy.name/wordpress/загрузка-стилей-в-футере/
</pre>

<p>Интересной особенностью является то, что при неполных абсолютных ссылках (пример №2,4,5) браузер подставляет адрес домена и протокол автоматически. В связи с этим часто бывает очень удобен вариант №5, который является абсолютным относительно корневой директории и относительным по отношению к типу протокола (http или https). Если проще - эта ссылка будет работать как для сайта с https, так и для сайта с его отсутствием.</p>

<h2>Реализуем это в functions.php</h2>

<pre class="prettyprint">
function removeHomeUrl($url)
{
    $url_sectors = preg_split(''/\//i'', $url);
    unset($url_sectors[0]);
    unset($url_sectors[1]);
    unset($url_sectors[2]);
    return ''/''.join(''/'', $url_sectors);
}
add_filter(''plugins_url'', ''removeHomeUrl'');

function attachment_image($attrs)
{
    $url_sectors = preg_split(''/\//'', $attrs[''src'']);
    unset($url_sectors[0]);
    unset($url_sectors[1]);
    unset($url_sectors[2]);
    $attrs[''src''] = ''/''.join(''/'', $url_sectors);
    return $attrs;
}

add_filter(''wp_get_attachment_image_attributes'', ''attachment_image'');
</pre>', '2015-05-20 18:57:42.498352', '2015-07-04 07:45:39.312033', 37, '');